/**
 * eGov suite of products aim to improve the internal efficiency,transparency, 
   accountability and the service delivery of the government  organizations.

    Copyright (C) <2015>  eGovernments Foundation

    The updated version of eGov suite of products as by eGovernments Foundation 
    is available at http://www.egovernments.org

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see http://www.gnu.org/licenses/ or 
    http://www.gnu.org/licenses/gpl.html .

    In addition to the terms of the GPL license to be adhered to in using this
    program, the following additional terms are to be complied with:

	1) All versions of this program, verbatim or modified must carry this 
	   Legal Notice.

	2) Any misrepresentation of the origin of the material is prohibited. It 
	   is required that all modified versions of this material be marked in 
	   reasonable ways as different from the original version.

	3) This license does not grant any rights to any user of the program 
	   with regards to rights under trademark law for use of the trade names 
	   or trademarks of eGovernments Foundation.

  In case of any queries, you can reach eGovernments Foundation at contact@egovernments.org.
 */
package org.egov.collection.entity;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.ServiceLoader;
import java.util.Set;

import javax.validation.constraints.Size;

import org.egov.collection.constants.CollectionConstants;
import org.egov.collection.utils.FinancialsUtil;
import org.egov.commons.CChartOfAccounts;
import org.egov.commons.EgwStatus;
import org.egov.commons.dao.ChartOfAccountsHibernateDAO;
import org.egov.infra.persistence.entity.Auditable;
import org.egov.infra.workflow.entity.StateAware;
import org.egov.infstr.annotation.Search;
import org.egov.infstr.models.ServiceDetails;
import org.egov.lib.security.terminal.model.Location;
import org.egov.model.instrument.InstrumentHeader;
import org.joda.time.DateTime;
import org.springframework.beans.factory.annotation.Autowired;

/**
 * ReceiptHeader generated by hbm2java
 */
public class ReceiptHeader extends StateAware implements Auditable{
	/**
	 * Serial version uid
	 */
	private static final long serialVersionUID  = 1L;
	private Long id;
	
	private ReceiptHeader receiptHeader;
	private Set<ReceiptHeader> receiptHeaders = new HashSet<ReceiptHeader>(0);

	private String referencenumber;
	private DateTime referencedate;
	private String consumerCode;
	/* The details of associated bill that billing application has sent */
	private String referenceDesc;
	private char receipttype;
	private String receiptnumber;
	private DateTime receiptdate;
	private String manualreceiptnumber;
	private DateTime manualreceiptdate;
	private Boolean isModifiable;

	private ServiceDetails service;
	private Character collectiontype;
	@Size(min=1)
	private Set<ReceiptDetail> receiptDetails = new LinkedHashSet<ReceiptDetail>(
			0);
	private ReceiptMisc receiptMisc;
	private Set<InstrumentHeader> receiptInstrument = new HashSet<InstrumentHeader>(
			0);
	private Set<ReceiptVoucher> receiptVoucher = new HashSet<ReceiptVoucher>(0);
	private Location location;
	private Boolean isReconciled;
	private EgwStatus status;
	private String reasonForCancellation;
	private String paidBy;
	private Boolean overrideAccountHeads;
	private Boolean partPaymentAllowed;
	private Boolean callbackForApportioning;
	private String collModesNotAllwd;
	private String displayMsg;
	private BigDecimal totalAmount;
	private BigDecimal minimumAmount;
	private BigDecimal totalAmountToBeCollected;
	private DateTime voucherDate;
	private String voucherNum;
	private OnlinePayment onlinePayment;
	private Challan challan;
	private String payeeName;
	private String payeeAddress;
	private String workflowUserName = "NA";
	private String instrumentsAsString;
	@Autowired
	private ChartOfAccountsHibernateDAO chartOfAccountsDAO;
	

	public ReceiptHeader() {
	}

	public ReceiptHeader(String referencenumber, DateTime referencedate,
			String consumerCode, String referenceDesc, BigDecimal totalAmount,
			BigDecimal minimumAmount, Boolean partPaymentAllowed,
			Boolean overrideAccountHeadsAllowed, Boolean callbackForApportioning,
			String displayMsg, ServiceDetails service, String collModesNotAllwd,String payeeName, String payeeAddress) {
		this.referencenumber = referencenumber;
		this.referencedate = referencedate;
		this.consumerCode = consumerCode;
		this.referenceDesc = referenceDesc;
		this.totalAmount = totalAmount;
		this.minimumAmount = minimumAmount;
		this.partPaymentAllowed = partPaymentAllowed;
		this.overrideAccountHeads = overrideAccountHeadsAllowed;
		this.callbackForApportioning = callbackForApportioning;
		this.displayMsg = displayMsg;
		this.service = service;
		this.collModesNotAllwd = collModesNotAllwd;
		this.payeeName = payeeName;
		this.payeeAddress = payeeAddress;
	}

	public ReceiptHeader(Boolean isReconciled, Boolean isModifiable, char receiptType, 
			Character collectionType, String paidBy, ServiceDetails serviceDetails, 
			String referencenumber,
			String referenceDesc, BigDecimal totalAmount) {
		this.isReconciled=isReconciled;
		this.isModifiable=isModifiable;
		this.receipttype=receiptType;
		this.collectiontype=collectionType;
		this.paidBy=paidBy;
		this.service=serviceDetails;
		this.referencenumber=referencenumber;
		this.referenceDesc=referenceDesc;
		this.totalAmount=totalAmount;
	}

	public String getReferencenumber() {
		return this.referencenumber;
	}

	public void setReferencenumber(String referencenumber) {
		this.referencenumber = referencenumber;
	}

	public DateTime getReferencedate() {
		return this.referencedate;
	}

	public void setReferencedate(DateTime referencedate) {
		this.referencedate = referencedate;
	}

	public String getReferenceDesc() {
		return referenceDesc;
	}

	public void setReferenceDesc(String referenceDesc) {
		this.referenceDesc = referenceDesc;
	}

	public char getReceipttype() {
		return this.receipttype;
	}

	public void setReceipttype(char receipttype) {
		this.receipttype = receipttype;
	}

	@Search(searchOp = Search.Operator.contains)	
	public String getReceiptnumber() {
		return this.receiptnumber;
	}

	public void setReceiptnumber(String receiptnumber) {
		this.receiptnumber = receiptnumber;
	}

	public String getManualreceiptnumber() {
		return this.manualreceiptnumber;
	}

	public void setManualreceiptnumber(String manualreceiptnumber) {
		this.manualreceiptnumber = manualreceiptnumber;
	}

	public DateTime getManualreceiptdate() {
		return this.manualreceiptdate;
	}

	public void setManualreceiptdate(DateTime manualreceiptdate) {
		this.manualreceiptdate = manualreceiptdate;
	}

	public Boolean getIsModifiable() {
		return this.isModifiable;
	}

	public void setIsModifiable(Boolean isModifiable) {
		this.isModifiable = isModifiable;
	}

	public ServiceDetails getService() {
		return this.service;
	}

	public void setService(ServiceDetails service) {
		this.service = service;
	}

	public Character getCollectiontype() {
		return this.collectiontype;
	}

	public void setCollectiontype(Character collectiontype) {
		this.collectiontype = collectiontype;
	}

	public Set<ReceiptDetail> getReceiptDetails() {
		return this.receiptDetails;
	}

	public void setReceiptDetails(Set<ReceiptDetail> receiptDetails) {
		this.receiptDetails = receiptDetails;
	}

	public void addReceiptDetail(ReceiptDetail receiptDetail) {
		getReceiptDetails().add(receiptDetail);
	}

	
	public DateTime getReceiptDate() {
		return this.getCreatedDate();
	}
	
	/**
	 * @return the location
	 */
	public Location getLocation() {
		return location;
	}

	/**
	 * @param location
	 *            the location to set
	 */
	public void setLocation(Location location) {
		this.location = location;
	}

	/**
	 * Returns total amount of the receipt
	 * 
	 * @return total amount of the receipt
	 */
	public BigDecimal getAmount() {
		BigDecimal totalAmount = BigDecimal.valueOf(0);
		List<CChartOfAccounts> bankCOAList =  FinancialsUtil.getBankChartofAccountCodeList();
		for (ReceiptDetail detail : receiptDetails) {
			if (!FinancialsUtil.isRevenueAccountHead(detail.getAccounthead(), bankCOAList)) {
				totalAmount = totalAmount.add(detail.getCramount());
				totalAmount = totalAmount.subtract(detail.getDramount());
			}
		}
		ServiceLoader.loadInstalled(FinancialsUtil.class);
		return totalAmount;
	}

	/**
	 * Returns instrument type of receipts associated with the receipt. Since
	 * multiple modes of payment for a receipt are not allowed (as of now), this
	 * method will return the type of the first instrument associated with this
	 * receipt.
	 * 
	 * @return instrument type of instruments associated with the receipt
	 */
	public String getInstrumentType() {
		if(!receiptInstrument.isEmpty()) {
		return receiptInstrument.iterator().next().getInstrumentType()
				.getType();
		}
		else {
			return ""; 
		}
	}

	public void addInstrument(InstrumentHeader instrumentMaster) {
		this.receiptInstrument.add(instrumentMaster);
	}

	/**
	 * @return the receiptInstrument
	 */
	public Set<InstrumentHeader> getReceiptInstrument() {
		return receiptInstrument;
	}

	/**
	 * @param receiptInstrument
	 *            the receiptInstrument to set
	 */
	public void setReceiptInstrument(Set<InstrumentHeader> receiptInstrument) {
		this.receiptInstrument = receiptInstrument;
	}

	/**
	 * 
	 * @param type
	 *            - the Instrument type
	 * @return Returns list of instruments of this instrument type. Useful to
	 *         get all cheque instruments or all bank instruments.
	 */
	public List<InstrumentHeader> getInstruments(String type) {
		ArrayList<InstrumentHeader> instrumentList = new ArrayList<InstrumentHeader>();
		for (InstrumentHeader instrument : getReceiptInstrument()) {
			if (type.equals(instrument.getInstrumentType().getType())) {
				instrumentList.add(instrument);
			}
		}
		return instrumentList;
	}

	/**
	 * @return the receiptVoucher
	 */
	public Set<ReceiptVoucher> getReceiptVoucher() {
		return receiptVoucher;
	}

	/**
	 * @param receiptVoucher
	 *            the receiptVoucher to set
	 */
	public void setReceiptVoucher(Set<ReceiptVoucher> receiptVoucher) {
		this.receiptVoucher = receiptVoucher;
	}

	public void addReceiptVoucher(ReceiptVoucher receiptVoucher) {
		this.receiptVoucher.add(receiptVoucher);
	}

	/**
	 * @return the isReconciled
	 */
	public Boolean getIsReconciled() {
		return isReconciled;
	}

	/**
	 * @param isReconciled
	 *            the isReconciled to set
	 */
	public void setIsReconciled(Boolean isReconciled) {
		this.isReconciled = isReconciled;
	}

	/**
	 * @return the egwStatus
	 */
	public EgwStatus getStatus() {
		return status;
	}

	/**
	 * @param status
	 *            the egwStatus to set
	 */
	public void setStatus(EgwStatus status) {
		this.status = status;
	}

	/**
	 * @return the reasonforcancellation
	 */
	public String getReasonForCancellation() {
		return reasonForCancellation;
	}

	/**
	 * @param reasonforcancellation
	 *            the reasonforcancellation to set
	 */
	public void setReasonForCancellation(String reasonforcancellation) {
		this.reasonForCancellation = reasonforcancellation;
	}

	public ReceiptMisc getReceiptMisc() {
		return receiptMisc;
	}

	public void setReceiptMisc(ReceiptMisc receiptMisc) {
		this.receiptMisc = receiptMisc;
	}

	/**
	 * @return the paidBy
	 */
	public String getPaidBy() {
		return paidBy;
	}

	/**
	 * @param paidBy
	 *            the paidBy to set
	 */
	public void setPaidBy(String paidBy) {
		this.paidBy = paidBy;
	}

	/**
	 * @return the overRideAccountHeads
	 */
	public Boolean getOverrideAccountHeads() {
		return overrideAccountHeads;
	}

	/**
	 * @param overRideAccountHeads
	 *            the overRideAccountHeads to set
	 */
	public void setOverrideAccountHeads(Boolean overrideAccountHeads) {
		this.overrideAccountHeads = overrideAccountHeads;
	}
	
	/**
	 * 
	 * @return the callbackForApportioning
	 */
	public Boolean getCallbackForApportioning() {
		return callbackForApportioning;
	}

	/**
	 * 
	 * @param callbackForApportioning flag indicating if billing system should 
	 * do the apportioning
	 */
	public void setCallbackForApportioning(Boolean callbackForApportioning) {
		this.callbackForApportioning = callbackForApportioning;
	}

	/**
	 * @return the partPaymentAllowed
	 */
	public Boolean getPartPaymentAllowed() {
		return partPaymentAllowed;
	}

	/**
	 * @param partPaymentAllowed
	 *            the partPaymentAllowed to set
	 */
	public void setPartPaymentAllowed(Boolean partPaymentAllowed) {
		this.partPaymentAllowed = partPaymentAllowed;
	}

	/**
	 * @return the string
	 */
	@Override
	public String myLinkId() {
		return getCurrentState().getNextAction()
				+ CollectionConstants.SEPARATOR_HYPHEN + service.getCode()
				+ CollectionConstants.SEPARATOR_HYPHEN
				+ this.getCreatedBy().getUsername()
				+ (location == null ? "" : CollectionConstants.SEPARATOR_HYPHEN + location.getId());
	}

	/**
	 *  @return the state details
	 */
	@Override
	public String getStateDetails() {
		return service.getName() + CollectionConstants.SEPARATOR_HYPHEN
				+ this.getCreatedBy().getUsername()
				+ (location == null ? "" : CollectionConstants.SEPARATOR_HYPHEN + location.getName());
	}

	public BigDecimal getTotalAmount() {
		return totalAmount;
	}

	public void setTotalAmount(BigDecimal totalAmount) {
		this.totalAmount = totalAmount;
	}

	public BigDecimal getMinimumAmount() {
		return minimumAmount;
	}

	public void setMinimumAmount(BigDecimal minimumAmount) {
		this.minimumAmount = minimumAmount;
	}

	public String getDisplayMsg() {
		return displayMsg;
	}

	public void setDisplayMsg(String displayMsg) {
		this.displayMsg = displayMsg;
	}

	public BigDecimal getTotalAmountToBeCollected() {
		return totalAmountToBeCollected;
	}

	public void setTotalAmountToBeCollected(BigDecimal totalAmountToBeCollected) {
		this.totalAmountToBeCollected = totalAmountToBeCollected;
	}

	/**
	 * @return the voucherDate
	 */
	public DateTime getVoucherDate() {
		return voucherDate;
	}

	/**
	 * @param voucherDate
	 *            the voucherDate to set
	 */
	public void setVoucherDate(DateTime voucherDate) {
		this.voucherDate = voucherDate;
	}

	/**
	 * @return the voucherNumber
	 */
	public String getVoucherNum() {
		return voucherNum;
	}

	/**
	 * @param voucherNumber
	 *            the voucherNumber to set
	 */
	public void setVoucherNum(String voucherNum) {
		this.voucherNum = voucherNum;
	}

	public String getCollModesNotAllwd() {
		return collModesNotAllwd;
	}

	public void setCollModesNotAllwd(String collModesNotAllwd) {
		this.collModesNotAllwd = collModesNotAllwd;
	}

	public String getConsumerCode() {
		return consumerCode;
	}

	public void setConsumerCode(String consumerCode) {
		this.consumerCode = consumerCode;
	}

	public String toString() {
		String str = "ReceiptHeader( Id : " + this.getId() + "ReceiptNo: " + this.receiptnumber + ",totalAmount : " + this.totalAmount
				+ ",referencenumber: " + this.referencenumber + ",paidBy: "
				+ this.paidBy + ",service: " + this.service + ",receiptMisc: "
				+ this.receiptMisc + ",receiptDetails " + this.receiptDetails
				+ " , Challan : " + this.challan + "]";

		return str;
	}

	/**
	 * @return the onlinePayment
	 */
	public OnlinePayment getOnlinePayment() {
		return onlinePayment;
	}

	/**
	 * @param onlinePayment
	 *            the onlinePayment to set
	 */
	public void setOnlinePayment(OnlinePayment onlinePayment) {
		this.onlinePayment = onlinePayment;
	}
	
	public Challan getChallan() {
		return challan;
	}

	public void setChallan(Challan challan) {
		this.challan = challan;
	}

	/**
	 * @return the receiptHeader
	 */
	public ReceiptHeader getReceiptHeader() {
		return receiptHeader;
	}

	/**
	 * @param receiptHeader the receiptHeader to set
	 */
	public void setReceiptHeader(ReceiptHeader receiptHeader) {
		this.receiptHeader = receiptHeader;
	}

	/**
	 * @return the receiptHeaders
	 */
	public Set<ReceiptHeader> getReceiptHeaders() {
		return receiptHeaders;
	}

	/**
	 * @param receiptHeaders the receiptHeaders to set
	 */
	public void setReceiptHeaders(Set<ReceiptHeader> receiptHeaders) {
		this.receiptHeaders = receiptHeaders;
	}
	
	/**
	 * This method returns Challan Number associated with the receipt
	 * In case of Cancelled receipts, get the receipt object created 
	 * in liu of old receipt object and returns the challan number 
	 * associated with the new receipt object.
	 * this method is invoked from serach receipt UI screen
	 * 
	 * @return String
	 */
	public String getReceiptChallanNumber()
	{
		String stringObj=null;
		if(this.receipttype==CollectionConstants.RECEIPT_TYPE_CHALLAN){	
			if(this.getChallan()==null){
				Set<ReceiptHeader> receiptHeadersSet = this.getReceiptHeaders();
				Iterator<ReceiptHeader> iter = receiptHeadersSet.iterator();
				while (iter.hasNext()) {
					ReceiptHeader receiptHeaderObj=(ReceiptHeader)iter.next();
					
					if(receiptHeaderObj.getChallan()==null){
						receiptHeadersSet = receiptHeaderObj.getReceiptHeaders();
						iter = receiptHeadersSet.iterator();
						continue;
					}
					else{	
						stringObj=receiptHeaderObj.getChallan().getChallanNumber();
						break;
					}	
				}
			}
			else{
				stringObj=this.getChallan().getChallanNumber();
			}
		}
		return stringObj;
	}

	public String getPayeeName() {
		return payeeName;
	}

	public void setPayeeName(String payeeName) {
		this.payeeName = payeeName;
	}

	public String getPayeeAddress() {
		return payeeAddress;
	}

	public void setPayeeAddress(String payeeAddress) {
		this.payeeAddress = payeeAddress;
	}

	public DateTime getReceiptdate() {
		return receiptdate;
	}

	public void setReceiptdate(DateTime receiptdate) {
		this.receiptdate = receiptdate;
	}
	
	/**
	 * @param workflowUserName
	 *            the workflowUserName to set
	 */
	public void setWorkflowUserName(String workflowUserName) {
		this.workflowUserName = workflowUserName;
	}

	/**
	 * @return the workflowUserName
	 */
	public String getWorkflowUserName() {
		return workflowUserName;
	}
	
	public String getInstrumentsAsString() {
		return instrumentsAsString;
	}

	public void setInstrumentsAsString(String instrumentsAsString) {
		this.instrumentsAsString = instrumentsAsString;
	}
	
	public String getInstrumentDetailAsString() {
		StringBuilder instrumentDetailsBuilder = new StringBuilder();

		for (InstrumentHeader instrument : receiptInstrument) {
			if (instrumentDetailsBuilder.length() > 0) {
				instrumentDetailsBuilder.append(", ");
			}

			String instrumentType = instrument.getInstrumentType().getType();
			instrumentDetailsBuilder.append(instrumentType);
			
			if (instrumentType.equals(CollectionConstants.INSTRUMENTTYPE_DD) || instrumentType.equals(CollectionConstants.INSTRUMENTTYPE_CHEQUE)
					|| instrumentType.equals(CollectionConstants.INSTRUMENTTYPE_CARD)) {
				// For DD/Cheque/Card, add instrument number
				instrumentDetailsBuilder.append(" # " + instrument.getInstrumentNumber());
			}
			if (instrumentType.equals(CollectionConstants.INSTRUMENTTYPE_BANK) || instrumentType.equals(CollectionConstants.INSTRUMENTTYPE_ONLINE)) {
				// For bank , add transaction number (challan number)
				instrumentDetailsBuilder.append(" # " + instrument.getTransactionNumber());
			}
			if (instrumentType.equals(CollectionConstants.INSTRUMENTTYPE_DD) || instrumentType.equals(CollectionConstants.INSTRUMENTTYPE_CHEQUE)) {
				// For DD/Cheque, add instrument date as well
				instrumentDetailsBuilder.append(" - " + new SimpleDateFormat("dd/MM/yyyy", Locale.getDefault()).format(instrument.getInstrumentDate()));
			}

			instrumentDetailsBuilder.append(" - " + instrument.getInstrumentAmount());
		}
		return instrumentDetailsBuilder.toString();
	}

	 @Override
	    public Long getId() {
	        return id;
	    }

	    @Override
	    public void setId(Long id) {
	        this.id = id;
	    }

}